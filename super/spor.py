from typing import List
import discord
from discord.ext import commands
import asyncio
from config import models, answers, questions, debate_settings, debate_history

async def process_model_response(ctx, topic: str, model: str, model_answers: dict, question: str = None) -> dict:
    try:
        model = model.strip()
        answer_data = answers.get(topic, {}).get(model, {})
        
        if answer_data:
            answer = answer_data.get("answer")
            if question:
                model_answers[model] = {"question": question, "answer": answer}
                await ctx.send(f"–ú–æ–¥–µ–ª—å {model} –Ω–∞ –ø–∏—Ç–∞–Ω–Ω—è '{question}': {answer}")
            else:
                model_answers[model] = answer
                await ctx.send(f"–ú–æ–¥–µ–ª—å {model}: {answer}")
        else:
            await ctx.send(f"–ú–æ–¥–µ–ª—å {model} –Ω–µ –º–æ–∂–µ –≤—ñ–¥–ø–æ–≤—ñ—Å—Ç–∏ –Ω–∞ –ø–∏—Ç–∞–Ω–Ω—è –∑ —Ç–µ–º–∏ '{topic}'.")
        
        return model_answers
    except Exception as e:
        print(f"Error in process_model_response: {e}")
        return model_answers

async def —Å–ø–æ—Ä(ctx, promt: str, settings: dict = None):
    """Main —Å–ø–æ—Ä function implementation"""
    try:
        if settings is None:
            settings = {
                'speed': 'medium',
                'permissions': []
            }
        
        models_list = None
        if ':' in promt:
            topic, models_list = promt.split(':', 1)
        else:
            topic = promt

        topic = topic.strip()
        if topic not in answers:
            available_topics = ", ".join(answers.keys())
            await ctx.send(f"‚ùå –¢–µ–º–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞. –î–æ—Å—Ç—É–ø–Ω—ñ —Ç–µ–º–∏: {available_topics}")
            return

        # Process debate settings
        delay = {
            'slow': 2.0,
            'medium': 1.0,
            'fast': 0.5
        }.get(settings.get('speed', 'medium'), 1.0)

        if settings.get('permissions'):
            if 'model_discussion' in settings['permissions']:
                await ctx.send("ü§ù –ú–æ–¥–µ–ª—ñ –º–æ–∂—É—Ç—å –æ–±–≥–æ–≤–æ—Ä—é–≤–∞—Ç–∏ –º—ñ–∂ —Å–æ–±–æ—é")
            if 'question_clarification' in settings['permissions']:
                await ctx.send("‚ùì –ú–æ–¥–µ–ª—ñ –º–æ–∂—É—Ç—å —É—Ç–æ—á–Ω—é–≤–∞—Ç–∏ –ø–∏—Ç–∞–Ω–ΩÔøΩÔøΩ")

        # Process models
        current_models = [m.strip() for m in models_list.split(',')] if models_list else models
        if not all(model in models for model in current_models):
            available_models = ", ".join(models)
            await ctx.send(f"‚ùå –í–∫–∞–∑–∞–Ω–∞ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞ –º–æ–¥–µ–ª—å. –î–æ—Å—Ç—É–ø–Ω—ñ –º–æ–¥–µ–ª—ñ: {available_models}")
            return

        # Get model responses
        model_answers = {}
        for model in current_models:
            await asyncio.sleep(delay)
            model_answers = await process_model_response(ctx, topic, model, model_answers)

        # Check for agreement
        for model1, answer1 in model_answers.items():
            for model2, answer2 in model_answers.items():
                if model1 != model2 and answer1.lower() == answer2.lower():
                    await ctx.send(f"–°—É–ø–µ—Ä–µ—á–∫–∞ –±—É–ª–∞ –∑—É–ø–∏–Ω–µ–Ω–∞! –ú–æ–¥–µ–ª—ñ {model1} —Ç–∞ {model2} –¥—ñ–π—à–ª–∏ –∑–≥–æ–¥–∏.")
                    return

        if model_answers:
            await ctx.send("–°—É–ø–µ—Ä–µ—á–∫–∞ —Ç—Ä–∏–≤–∞—î...")
        else:
            await ctx.send("–ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π –¥–ª—è –≤–∫–∞–∑–∞–Ω–∏—Ö –º–æ–¥–µ–ª–µ–π.")

    except Exception as e:
        await ctx.send(f"‚ùå –ü–æ–º–∏–ª–∫–∞: {str(e)}")
        await ctx.send("–í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è: /—Å–ø–æ—Ä <—Ç–µ–º–∞> –∞–±–æ /—Å–ø–æ—Ä <—Ç–µ–º–∞>:<–º–æ–¥–µ–ª—å1>,<–º–æ–¥–µ–ª—å2>")
